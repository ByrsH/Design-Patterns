桥梁模式相关文章：

https://blog.csdn.net/u010657094/article/details/83902443


### 定义

> 将抽象和实现解耦，使得两者可以独立地变化。

### 通用类图
![桥梁模式](https://img-blog.csdnimg.cn/20181109195715300.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA2NTcwOTQ=,size_16,color_FFFFFF,t_70)
### 具体实现
由桥梁模式定义可知该模式是把抽象定义和具体实现进行了分离，分离开来是为了当两者发生变化时互不不影响。实现的分离既可以保证被重用，也可以使抽象自由的选择不同的实现。比如一个连锁的做过桥米线的餐馆，刚开始时总店和分店都只卖米线，定义接口produce()，具体实现是厨师做出一碗米线，各个分店继承总店。过了一段时间，分店B发现这的人不喜欢米线，喜欢吃麻辣烫，B店就把produce()的实现改成了麻辣烫。过了一段时间分店D、E等也要改做麻辣烫，这时就需要把做麻辣烫的实现单独抽离出来重用。通过继承来实现共用时还有一个限制是父类发生改变时，子类要想不变则必须重写父类方法，当存在很多子类时就非常麻烦，如果把实现分离出来，父类只要使用一个新的实现，子类依然用老的实现就非常灵活了。

Abstraction——抽象化角色，主要是定义角色的行为，保存一个实现化角色的引用。

```
package com.yrs.bridge;

/**
 * @Author: yangrusheng
 * @Description: 抽象化角色
 * @Date: Created in 9:10 2018/11/7
 * @Modified By:
 */
public abstract class Abstraction {
    //定义对实现化角色的引用
    private Implementor imp;
    //约束子类必须实现该构造函数
    public Abstraction(Implementor imp) {
        this.imp = imp;
    }
    //自身的行为和属性
    public void request() {
        this.imp.doSomething();
    }
    //获得实现化角色
    public Implementor getImp() {
        return this.imp;
    }
}
```
RefinedAbstraction——修正抽象化角色，它继承抽象化角色，同时引用引用实现化角色对抽象化角色方法进行修正。

```
package com.yrs.bridge;

/**
 * @Author: yangrusheng
 * @Description: 具体抽象化角色
 * @Date: Created in 9:14 2018/11/7
 * @Modified By:
 */
public class RefineAbstraction extends Abstraction {

    //重写构造函数
    public RefineAbstraction(Implementor imp) {
        super(imp);
    }

    //修正父类的行为
    @Override
    public void request() {
        /*
         *  业务逻辑处理...
         */
        super.request();
        super.getImp().doAnything();
    }

}
```
Implementor——实现化角色，它是接口或者抽象类，定义角色必需的行为和属性。

```
package com.yrs.bridge;

/**
 * @Author: yangrusheng
 * @Description: 实现化角色
 * @Date: Created in 9:06 2018/11/7
 * @Modified By:
 */
public interface Implementor {
    public void doSomething();
    public void doAnything();
}
```
ConcreteImplementor——具体实现化角色，它实现接口或抽象类定义的方法和属性。

```
package com.yrs.bridge;

/**
 * @Author: yangrusheng
 * @Description: 具体实现化角色
 * @Date: Created in 9:08 2018/11/7
 * @Modified By:
 */
public class ConcreteImplementor1 implements Implementor {
    @Override
    public void doSomething() {
        //业务逻辑处理
    }

    @Override
    public void doAnything() {
        //业务逻辑处理
    }
}
```
场景类：client

```
package com.yrs.bridge;

/**
 * @Author: yangrusheng
 * @Description: 场景类
 * @Date: Created in 9:17 2018/11/7
 * @Modified By:
 */
public class Client {

    public static void main(String[] args) {
        //定义一个实现化角色
        Implementor imp = new ConcreteImplementor1();
        //定义一个抽象化角色
        Abstraction abstraction = new RefineAbstraction(imp);
        //执行
        abstraction.request();
    }

}
```
**源代码：https://github.com/ByrsH/Design-Patterns/tree/master/Design%20Patterns/src/main/java/com/yrs/bridge**

### 优点：

 - 抽象和实现分离。实现可以不受抽象的约束，不用再绑定在一个固定的抽象层次上。
 - 优秀的扩充能力
 - 实现细节对客户透明

### 使用场景：

 - 不希望或不适用使用继承的场景
 - 接口或抽象类不稳定的场景
 - 重用性要求较高的场景

继承是面向对象的一个优良属性，但并不是任何情况下都适合用继承。对于比较明确不发生变化的，则通过继承来完成；若不能确定是否会发生变化的，那就认为是会发生变化，则通过桥梁模式来解决。

### 参考

 - 《设计模式之禅-第2版》




